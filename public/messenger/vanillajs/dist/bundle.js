!function(e){var t={};function s(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(i,r,function(t){return e[t]}.bind(null,r));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);const i=e=>{return`${(e.getMonth()+1).toString().padStart(2,"0")}/${e.getDate().toString().padStart(2,"0")}`},r=class{constructor(){this.events={}}on(e,t){const s=this.events[e]||[];this.events[e]=s.concat(t)}off(e,t){const s=this.events[e];s&&(this.events[e]=s.filter(e=>e!==t))}once(e,t){const s=(...i)=>{t(...i),this.off(e,s)};this.on(e,s)}emit(e,...t){const s=this.events[e];s&&s.forEach(e=>{e(...t)})}};var n={currentUser:({nickname:e})=>`${e}`,resultItem:({_id:e,email:t,nickname:s})=>`\n  <div class="search__user-item" data-id="${e}">\n    <div class="search__user-name">${s}</div>\n    <div class="search__user-email">${t}</div>\n    <div class="search__user-relationship">\n      <button class="search__friendrequest-button button">Add</button>\n    </div>\n  </div>`,resultNoItem:()=>'<div class="search__no-item">no result</div>',friendrequest:({_id:e,from:t})=>`\n  <div class="friendrequest" data-id="${e}">\n    <div class="friendrequest__nickname">${t.nickname}</div>\n    <div class="friendrequest__button-list">\n      <button class="friendrequest__button button" data-answer="accept">Accept</button>\n      <button class="friendrequest__button button" data-answer="decline">Decline</button>\n    </div>\n  </div>`,friend:({_id:e,nickname:t,isPresent:s})=>`\n    <div class="friend ${s?"friend--signed-in":""}" data-id="${e}" data-nickname="${t}">\n      <div class="friend__content">\n        <div class="friend__picture"></div>\n      </div>\n    </div>`,room:({_id:e,users:t,lastMessage:s,createdAt:r})=>`\n  <div class="room" data-id="${e}">\n    <div class="room__picture"></div>\n    <div class="room__info"><div class="room__info-center">\n        <div class="room__name">${t.map(e=>e.nickname).join(", ")}</div>\n        <div class="room__last-message">${s?s.text:"new room"}</div>\n      </div>\n      <div class="room__last-message-date">${i(s?new Date(s.createdAt):new Date(r))}</div>\n    </div>\n  </div>`,message:({type:e,sender:t,createdAt:s,text:i})=>"text"===e?`\n  <div class="message message--theme-text">\n    <div class="message__picture"></div>\n    <div class="message__content">\n      <div class="message__header">\n        <div class="message__sender">${t.nickname}</div>\n        <div class="message__created-at">${(e=>{return`${(e.getHours()+1).toString().padStart(2,"0")}:${e.getMinutes().toString().padStart(2,"0")}`})(new Date(s))}</div>\n      </div>\n      <div class="message__body">${i}</div>\n    </div>\n  </div>`:`\n  <div class="message message--theme-status">${i}</div>`,selectedUser:({_id:e,nickname:t})=>`\n  <div class="selected-user" data-id="${e}">\n    <input class="selected-user__checkbox" type="checkbox"></input>\n    <label class="selected-user__nickname">${t}</label>\n  </div>\n  `,userInUserSelect:({_id:e,nickname:t})=>`\n  <div class="user-select__user" data-id="${e}">\n    <div class="user-select__user-avatar"></div>\n    <span class="user-select__user-nickname">${t}</span>\n  </div>\n`,selectedUserInUserSelect:({id:e,nickname:t})=>`\n  <div class="user-select__selected-user tag" data-id="${e}">\n    <span class="tag__name">${t}</span>\n    <button class="tag__remove-button"></button>\n  </div>\n`};class o{constructor({modal:e,toggle:t}){this.$modal=e,this.$modalContent=e.querySelector(".modal__content"),this.$toggle=t,this.$modalContentContainer=e.querySelector(".carousel__inner"),this.$modalContentSliderNext=e.querySelector(".carousel__slider--next"),this.$modalContentSliderBack=e.querySelector(".carousel__slider--back"),this.$toggle.addEventListener("click",()=>{this.open()}),this.$modalContentSliderNext.addEventListener("click",()=>{this.$modalContentContainer.classList.add("carousel__inner--next")}),this.$modalContentSliderBack.addEventListener("click",()=>{this.$modalContentContainer.classList.remove("carousel__inner--next")})}bindClose(e){this.$modal.addEventListener("click",({target:t})=>{t.className===this.$modal.className&&e()})}open(){this.$modal.classList.remove("modal--hidden"),this.$modal.classList.add("modal--visible"),this.$modal.classList.add("modal--fade-in"),this.$modal.addEventListener("animationstart",()=>{this.$modalContent.classList.remove("modal__content--collapse")},{once:!0}),this.$modal.addEventListener("animationend",({currentTarget:e})=>{e.classList.remove("modal--fade-in")},{once:!0})}close(){this.$modal.classList.add("modal--fade-out"),this.$modalContent.classList.add("modal__content--collapse"),this.$modal.addEventListener("animationend",({currentTarget:e})=>{e.classList.remove("modal--visible"),e.classList.remove("modal--fade-out"),e.classList.add("modal--hidden"),this.$modalContentContainer.classList.remove("carousel__inner--next")},{once:!0})}}class d{constructor(e,{modal:t}){this.template=e,this.$modal=t,this.$modalContent=t.querySelector(".modal__content"),this.$confirmButton=t.querySelector(".user-select__confirm-button"),this.$userList=t.querySelector(".user-select__user-list"),this.$selectedUserList=t.querySelector(".user-select__selected-user-list"),this.handleConfirm=null,this.$userList.addEventListener("click",({target:e})=>{const t=e.closest(".user-select__user");if(!t)return;const{id:s}=t.dataset,i=t.querySelector(".user-select__user-nickname").textContent;this.addSelectedUser(s,i)}),this.$selectedUserList.addEventListener("click",({target:e})=>{if("BUTTON"!==e.tagName)return;const t=e.closest(".user-select__selected-user");this.$selectedUserList.removeChild(t)})}bindConfim(e){const t=()=>{const t=this.$selectedUserList.querySelectorAll(".user-select__selected-user"),s=Array.from(t,({dataset:{id:e}})=>e);e(s)};this.$confirmButton.addEventListener("click",t),this.handleConfirm=t}unbindConfirm(){this.$confirmButton.removeEventListener("click",this.handleConfirm),this.handleConfirm=null}render(e){this.$userList.innerHTML=e.reduce((e,t)=>e+this.template.userInUserSelect(t),""),this.$modal.classList.remove("modal--hidden"),this.$modal.classList.add("modal--visible"),this.$modal.classList.add("modal--fade-in"),this.$modal.addEventListener("animationstart",()=>{this.$modalContent.classList.remove("modal__content--collapse")},{once:!0}),this.$modal.addEventListener("animationend",({currentTarget:e})=>{e.classList.remove("modal--fade-in")},{once:!0})}clear(){this.$modal.classList.add("modal--fade-out"),this.$modalContent.classList.add("modal__content--collapse"),this.$modal.addEventListener("animationend",({currentTarget:e})=>{e.classList.remove("modal--visible"),e.classList.remove("modal--fade-out"),e.classList.add("modal--hidden"),this.$userList.innerHTML="",this.$selectedUserList.innerHTML=""},{once:!0})}addSelectedUser(e,t){this.$selectedUserList.querySelector(`.user-select__selected-user[data-id="${e}"]`)||this.$selectedUserList.insertAdjacentHTML("beforeend",this.template.selectedUserInUserSelect({id:e,nickname:t}))}}class a{constructor({toggle:e,badge:t}){this.$toggle=e,this.$badge=t}bindToggle(e){this.$toggle.addEventListener("click",()=>{e()})}active(){this.$toggle.classList.remove("menu__item--theme-hide")}deactive(){this.$toggle.classList.add("menu__item--theme-hide")}setBadgeNumber(e){0===e?this.$badge.classList.add("badge--theme-hide"):(this.$badge.classList.remove("badge--theme-hide"),this.$badge.textContent=e)}}class c{constructor({popover:e}){this.$popover=e,this.$nickname=e.querySelector(".friend-popover__nickname")}bindRemoveFriend(e){this.$popover.addEventListener("click",({target:t})=>{if("remove"!==t.dataset.behavior)return;const{userId:s}=this.$popover.dataset;this.clear(),e(s)})}bindMessageToFriend(e){this.$popover.addEventListener("click",({target:t})=>{if("message"!==t.dataset.behavior)return;const{userId:s}=this.$popover.dataset;this.clear(),e(s)})}render({id:e,nickname:t,location:s}){this.$popover.dataset.userId===e?this.clear():(this.$popover.classList.add("friend-popover--active"),this.$popover.style.top=`${s}px`,this.$popover.dataset.userId=e,this.$nickname.textContent=t)}clear(){this.$popover.classList.remove("friend-popover--active"),this.$popover.dataset.userId="",this.$nickname.textContent=""}}new class{constructor(e,t){this.model=e,this.view=t,t.bindCreateCurrentUser(this.createCurrentUser.bind(this)),t.bindGetCurrentUser(this.getCurrentUser.bind(this)),t.bindClearCurrentUser(this.clearCurrentUser.bind(this)),t.bindUpdateFriendrequest(this.updateFriendrequest.bind(this)),t.bindSearchUsers(this.searchUsers.bind(this)),t.bindRequestFriend(this.requestFriend.bind(this)),t.bindRemoveFriend(this.removeFriend.bind(this)),t.bindMessageToFriend(this.messageToFriend.bind(this)),t.bindOpenChat(this.openChat.bind(this)),t.bindSendMessage(this.sendMessage.bind(this)),t.bindLeaveRoom(this.leaveRoom.bind(this)),t.bindInviteUserToRoom(this.inviteUserToRoom.bind(this)),t.bindOpenUserSelect(this.openUserSelect.bind(this))}init(){this.model.init((e,t)=>{e||t&&this.setCurrentUser(t)})}createCurrentUser(e,t,s){this.model.insertCurrentUser({email:e,password:t,nickname:s},(e,t)=>{e||(this.view.closeModal(),this.setCurrentUser(t))})}getCurrentUser(e,t){this.model.findCurrentUser({email:e,password:t},(e,t)=>{e||(this.view.closeModal(),this.setCurrentUser(t))})}async setCurrentUser(e){const t=await e.getFriendrequests(),s=await e.getFriends({isPresent:"desc"}),i=await e.getRooms();this.model.setCurrentUser(e),this.model.onFriendRequestsUpdated(this.view.renderFriendrequests.bind(this.view)),this.model.onFriendsUpdated(this.view.renderFriends.bind(this.view)),this.model.onRoomsUpdated(this.view.renderRooms.bind(this.view)),this.model.onMessage(e=>{console.log(e)}),this.view.renderCurrentUser(e),this.view.renderFriendrequests(t),this.view.renderFriends(s),this.view.renderRooms(i)}clearCurrentUser(){this.model.clearCurrentUser(e=>{e?console.log(e):this.view.clear()})}updateFriendrequest(e,t){this.model.updateFriendrequest({id:e,answer:t},()=>{this.view.removeFriendrequest(e)})}searchUsers(e){this.model.findUsers({fields:["email","nickname"],value:e},e=>{this.view.renderSearchResults(e)})}requestFriend(e){this.model.insertFriendrequest({to:e},()=>{console.log("request completed!")})}removeFriend(e){this.model.deleteFriend({id:e},(e,t)=>{e||console.log(`${t.nickname}님이 성공적으로 제거되었습니다`)})}messageToFriend(e){this.model.insertRoom({addUserIds:[e]},(e,t)=>{e||(this.view.clearChat(),this.view.renderChat(t),this.view.setRoomSelected(t),this.cancelAllSubscription(),this.subscribeToRoom(t))})}openChat(e){this.model.findRoom({id:e},(e,t)=>{e||(this.view.clearChat(),this.view.renderChat(t),this.view.setRoomSelected(t),this.cancelAllSubscription(),this.subscribeToRoom(t))})}subscribeToRoom(e){this.model.insertRoomHook({roomId:e._id,hooks:{onMessage:this.view.addMessage.bind(this.view),onUpdate:this.view.renderChat.bind(this.view)}},e=>{e||console.log("hook is attached")})}cancelAllSubscription(){this.model.deleteRoomHook()}sendMessage(e,t){this.model.insertMessage({roomId:e,text:t},e=>{e||console.log(`message is sent : ${t}`)})}leaveRoom(e){this.model.deleteRoom({id:e},e=>{e&&console.log(e),this.view.clearChat(),this.cancelAllSubscription()})}inviteUserToRoom(e){this.model.insertRoomUsers({userIds:e},e=>{e&&console.log(e)})}openUserSelect(){this.model.findFriends((e,t)=>{e||this.view.renderUserSelect(t)})}}(new class{constructor(e){this.easychat=e,this.currentUser=null,this.openedRoomId="",this.eventEmitter=new r}init(e){this.easychat.initializeApp().then(t=>{e(null,t)}).catch(t=>{e(t)})}onFriendPresenceChanged(e){this.currentUser.onFriendPresenceChanged(e)}onFriendRequestsUpdated(e){this.currentUser.onFriendRequested(async()=>{const t=await this.currentUser.getFriendrequests();e(t)})}onFriendsUpdated(e){const t=async()=>{const t=await this.currentUser.getFriends({isPresent:"decs"});e(t)};this.currentUser.onFriendAdded(t),this.currentUser.onFriendPresenceChanged(t),this.currentUser.onFriendRemoved(t)}onRoomsUpdated(e){const t=async()=>{const t=await this.currentUser.getRooms();e(t),this.eventEmitter.emit("rooms-updated")};this.currentUser.onRoomAdded(t),this.currentUser.onRoomUpdated(t),this.currentUser.onRoomRemoved(t)}onMessage(e){this.currentUser.onMessage(e)}insertCurrentUser({email:e,password:t,nickname:s},i){this.easychat.createUser(e,t,s).then(e=>{i(null,e)}).catch(e=>{i(e)})}findCurrentUser({email:e,password:t},s){this.easychat.signIn(e,t).then(e=>{s(null,e)}).catch(e=>{s(e)})}setCurrentUser(e){this.currentUser=e}updateFriendrequest({id:e,answer:t},s){this.currentUser.responseFriendrequest(e,t).then(()=>{s()})}findUsers({fields:e,value:t},s){const i=e.map(e=>this.easychat.getUsers(e,t));Promise.all(i).then(e=>{const t=e.flat(),i=t.filter((e,s)=>t.findIndex(t=>t.email===e.email)>=s);s(i)})}insertFriendrequest({to:e},t){this.currentUser.requestFriend(e).then(()=>{t()})}deleteFriend({id:e},t){this.currentUser.removeFriend(e).then(e=>{t(null,e)}).catch(e=>{t(e)})}insertRoom(e,t){this.currentUser.createRoom(e).then(e=>{this.eventEmitter.once("rooms-updated",()=>{t(null,e)})}).catch(e=>{t(e)})}findRoom({id:e},t){this.easychat.getRoom(e).then(e=>{t(null,e)}).catch(e=>{t(e)})}insertRoomHook({roomId:e,hooks:t},s){this.openedRoomId=e,this.currentUser.openRoom({roomId:e,hooks:t}).then(()=>{s(null)}).catch(e=>{s(e)})}deleteRoomHook(){const e=this.openedRoomId;e&&(this.currentUser.closeRoom(e),this.openedRoomId="")}insertMessage({roomId:e,text:t},s){this.currentUser.sendMessage({roomId:e,text:t}).then(()=>{s(null)}).catch(e=>{s(e)})}deleteRoom({id:e},t){this.currentUser.leaveRoom(e).then(()=>{t(null)}).catch(e=>{t(e)})}clearCurrentUser(e){this.easychat.signOut().then(()=>{e()})}findFriends(e){this.currentUser.getFriends().then(t=>{e(null,t)}).catch(t=>{e(t)})}insertRoomUsers({userIds:e},t){this.currentUser.addUsersToRoom({roomId:this.openedRoomId,userIds:e}).then(()=>{t(null)}).catch(e=>{t(e)})}}(new Easychat({apiKey:"26498f3ddfbe91d"})),new class{constructor(e){this.template=e,this.$signUpForm=document.querySelector(".form--sign-up"),this.$signInForm=document.querySelector(".form--sign-in"),this.$currentUser=document.querySelector(".current-user"),this.$signInButton=document.querySelector(".menu__item--sign-in"),this.$signOutButton=document.querySelector(".menu__item--sign-out"),this.$friendrequestList=document.querySelector(".friendrequest-list"),this.$searchInput=document.querySelector("input"),this.$searchResult=document.querySelector(".search__result"),this.$friendList=document.querySelector(".friend-list"),this.$roomList=document.querySelector(".room-list"),this.$chat=document.querySelector(".chat"),this.$chatBody=this.$chat.querySelector(".chat__body"),this.$chatName=this.$chat.querySelector(".chat__room-name"),this.$chatUserNumber=this.$chat.querySelector(".chat__user-number"),this.$chatForm=this.$chat.querySelector(".chat__form"),this.$chatInput=this.$chat.querySelector(".chat__input"),this.$chatLeaveButton=this.$chat.querySelector(".chat__room-option--action-leave"),this.$chatInviteButton=this.$chat.querySelector(".chat__room-option--action-invite"),this.authModal=new o({modal:document.querySelector(".modal--auth"),toggle:this.$signInButton}),this.userSelectModal=new d(e,{modal:document.querySelector(".modal--user-select")}),this.friendrequestsToggle=new a({toggle:document.querySelector(".menu__item--friendrequests"),badge:document.querySelector(".menu__badge--for-friendrequests")}),this.friendPopover=new c({popover:document.querySelector(".friend-popover")}),this.handleInviteUserToRoom=null,this.authModal.bindClose(this.closeModal.bind(this)),this.friendrequestsToggle.bindToggle(this.toggleFriendrequestList.bind(this)),this.$friendList.addEventListener("click",({target:e})=>{if("friend__picture"!==e.className)return;const t=e.closest(".friend"),{offsetTop:s,offsetHeight:i}=t,r=s+i/2,{id:n,nickname:o}=t.dataset;this.friendPopover.render({id:n,nickname:o,location:r})})}bindCreateCurrentUser(e){this.$signUpForm.addEventListener("submit",t=>{t.preventDefault();const s=t.target.querySelectorAll("input"),i=Array.from(s,e=>e.value);e(...i)})}bindGetCurrentUser(e){this.$signInForm.addEventListener("submit",t=>{t.preventDefault();const s=t.target.querySelectorAll("input"),i=Array.from(s,e=>e.value);e(...i)})}bindClearCurrentUser(e){this.$signOutButton.addEventListener("click",()=>{e()})}bindUpdateFriendrequest(e){this.$friendrequestList.addEventListener("click",({target:t})=>{if("BUTTON"!==t.tagName)return;const{answer:s}=t.dataset,i=t.closest(".friendrequest"),{id:r}=i.dataset;e(r,s)})}bindSearchUsers(e){this.$searchInput.addEventListener("input",async({target:{value:t}})=>{if(""===t)return void this.$searchResult.classList.remove("search__result--active");const s=new RegExp(`^${t}`);this.$searchResult.classList.add("search__result--active"),this.$searchResult.classList.add("search__result--loading"),e(s)})}bindRequestFriend(e){this.$searchResult.addEventListener("click",({target:t})=>{if("BUTTON"!==t.tagName)return;const s=t.closest(".search__user-item").dataset.id;e(s)})}bindRemoveFriend(e){this.friendPopover.bindRemoveFriend(e)}bindMessageToFriend(e){this.friendPopover.bindMessageToFriend(e)}bindOpenChat(e){this.$roomList.addEventListener("click",({target:t})=>{const s=t.closest(".room");s&&(s.classList.contains("room--selected")||e(s.dataset.id))})}bindSendMessage(e){this.$chatForm.addEventListener("submit",t=>{t.preventDefault();const s=this.$chatInput.value,{roomId:i}=this.$chat.dataset;s&&i&&(this.$chatInput.value="",this.$chatBody.scrollTop=this.$chatBody.scrollHeight-this.$chatBody.clientHeight,e(i,s))})}bindLeaveRoom(e){this.$chatLeaveButton.addEventListener("click",()=>{const{roomId:t}=this.$chat.dataset;e(t)})}bindInviteUserToRoom(e){this.handleInviteUserToRoom=e}bindOpenUserSelect(e){this.$chatInviteButton.addEventListener("click",()=>{this.userSelectModal.bindConfim(e=>{e.length&&this.handleInviteUserToRoom(e),this.closeUserSelect()}),e()})}renderCurrentUser(e){this.$currentUser.innerHTML=this.template.currentUser(e),this.$currentUser.classList.remove("menu__item--theme-hide"),this.$signInButton.classList.add("menu__item--theme-hide"),this.$signOutButton.classList.remove("menu__item--theme-hide"),this.friendrequestsToggle.active()}renderFriendrequests(e){this.$friendrequestList.innerHTML=e.reduce((e,t)=>{return e+this.template.friendrequest(t)},""),this.friendrequestsToggle.setBadgeNumber(this.$friendrequestList.children.length)}removeFriendrequest(e){const t=this.$friendrequestList.querySelector(`[data-id="${e}"]`);this.$friendrequestList.removeChild(t),this.friendrequestsToggle.setBadgeNumber(this.$friendrequestList.children.length)}renderSearchResults(e){this.$searchResult.innerHTML="",this.$searchResult.innerHTML=0===e.length?this.template.resultNoItem():e.reduce((e,t)=>e+this.template.resultItem(t),""),this.$searchResult.classList.remove("search__result--loading")}renderFriends(e){this.$friendList.innerHTML=e.reduce((e,t)=>e+this.template.friend(t),"")}renderRooms(e){const t=this.$roomList.querySelector(".room--selected"),s=t?t.dataset.id:"";this.$roomList.innerHTML=e.reduce((e,t)=>e+this.template.room(t),""),s&&this.setRoomSelected({_id:s})}renderChat(e){this.$chat.classList.add("chat--active"),this.$chat.dataset.roomId=e._id,this.$chatName.textContent=e.users.map(e=>e.nickname).join(", "),this.$chatUserNumber.textContent=e.users.length,this.$chatInput.value="",this.$chatInput.focus()}clearChat(){this.$chat.classList.remove("chat--active"),this.$chat.dataset.roomId="",this.$chatBody.innerHTML="",this.$chatName.textContent="",this.$chatUserNumber.textContent="",this.$chatInput.value="",this.$chatInput.blur()}setRoomSelected({_id:e}){this.$roomList.querySelectorAll(".room").forEach(t=>{t.dataset.id!==e?t.classList.remove("room--selected"):t.classList.add("room--selected")})}addMessage(e){const t=this.$chatBody.scrollTop<this.$chatBody.scrollHeight-this.$chatBody.clientHeight;this.$chatBody.insertAdjacentHTML("beforeend",this.template.message(e)),t||(this.$chatBody.scrollTop=this.$chatBody.scrollHeight-this.$chatBody.clientHeight)}closeModal(){this.authModal.close(),this.$signInForm.reset(),this.$signUpForm.reset()}toggleFriendrequestList(){this.$friendrequestList.classList.toggle("friendrequest-list--active")}renderUserSelect(e){this.userSelectModal.render(e)}closeUserSelect(){this.userSelectModal.clear(),this.userSelectModal.unbindConfirm()}clear(){this.$currentUser.innerHTML="",this.$currentUser.classList.add("menu__item--theme-hide"),this.$signInButton.classList.remove("menu__item--theme-hide"),this.$signOutButton.classList.add("menu__item--theme-hide"),this.friendrequestsToggle.deactive(),this.$friendrequestList.innerHTML="",this.$friendrequestList.classList.remove("friendrequest-list--active"),this.$friendList.innerHTML="",this.$roomList.innerHTML="",this.clearChat()}}(n)).init()}]);